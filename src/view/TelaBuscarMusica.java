/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;
//Imports 
import java.sql.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import model.Sessao;

/**
 *
 * @author Kenez
 */
public class TelaBuscarMusica extends javax.swing.JFrame {

    /**
     * Creates new form TelaBuscarMusica
     */
    public TelaBuscarMusica() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtBusca = new javax.swing.JTextField();
        comboFiltro = new javax.swing.JComboBox<>();
        btnBuscar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaResultado = new javax.swing.JTable();
        btnVoltar = new javax.swing.JButton();
        btnCurtir = new javax.swing.JButton();
        btnDescurtir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Buscar música");

        jLabel2.setText("Encontre:");

        txtBusca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscaActionPerformed(evt);
            }
        });

        comboFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nome", "Artista", "Gênero" }));

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        tabelaResultado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "ID", "Nome", "Artista", "Gênero"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaResultado.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane1.setViewportView(tabelaResultado);

        btnVoltar.setText("Voltar ao Menu");
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        btnCurtir.setText("Curtir");
        btnCurtir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCurtirActionPerformed(evt);
            }
        });

        btnDescurtir.setText("Descurtir");
        btnDescurtir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDescurtirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(120, 120, 120)
                                .addComponent(btnBuscar))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnVoltar)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtBusca, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(comboFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(32, 32, 32)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(360, 360, 360)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(476, 476, 476)
                        .addComponent(btnCurtir, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(btnDescurtir)))
                .addContainerGap(437, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtBusca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBuscar))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDescurtir)
                    .addComponent(btnCurtir))
                .addGap(44, 44, 44)
                .addComponent(btnVoltar)
                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtBuscaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBuscaActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        //Aqui é onde busca os dados das musicas no Banco
        String busca = txtBusca.getText();
        String filtro = comboFiltro.getSelectedItem().toString().trim();
        
        String sql = "SELECT m.id, m.nome AS musica_nome, m.genero, a.nome AS "
                + "artista_nome " +
                    "FROM musica m JOIN artista a ON m.id_artista = a.id " +
                        "WHERE ";
        if (filtro.equals("Nome")) {
            //Seleciona o nome
            sql += "m.nome ILIKE ?";
        } else if (filtro.equals("Artista")) {
            //Seleciona o artista
            sql += "a.nome ILIKE ?";
        } else if (filtro.equals("Gênero")) {
            //Seleciona o genero
            sql += "m.genero ILIKE ?";
        }
        
        try{
            Connection conn = dao.Conexao.conectar();
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1 ,"%"  + busca +  "%");
            
            ResultSet rs = stmt.executeQuery();
            
            //Limpando a tabela aqui
            DefaultTableModel model = (DefaultTableModel) tabelaResultado.getModel();
            model.setRowCount(0);
            
            while (rs.next()) {
                int id = rs.getInt("id");
                String nomeMusica = rs.getString("musica_nome");
                String artista = rs.getString("artista_nome");
                String genero = rs.getString("genero");

                model.addRow(new Object[]{  id , nomeMusica , artista , genero });
                
                //Aqui registraremos as musicas buscadas no historico
                try{
                    int idUsuario = Sessao.getUsuario().getId();
                    int idMusica =  rs.getInt("id");
                    
                    //Inserindo com comandos
                    String sqlHistorico = "INSERT INTO historico_busca "
                            + "(id_usuario, id_musica) VALUES (?, ?)";
                    PreparedStatement stmtHistorico = 
                            conn.prepareStatement(sqlHistorico);
                    //Registra o id do usuario
                    stmtHistorico.setInt(1, idUsuario);
                    //Registra o id da musica
                    stmtHistorico.setInt(2, idMusica);
                    //atualiza o historico aqui
                    stmtHistorico.executeUpdate();
                }catch (Exception ex){
                    //Mensagem de possivel erro
                    System.out.println("Erro ao registrar no histórico" 
                            + ex.getMessage());
                }
            }
            conn.close();
            
        }catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro na busca, " 
                    + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        // TODO add your handling code here:
        //Fecha essa tela
        this.dispose();
        //Abre essa outra
        new TelaPrincipal().setVisible(true);
    }//GEN-LAST:event_btnVoltarActionPerformed

    private void btnCurtirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCurtirActionPerformed
        // TODO add your handling code here:
        //Edições para curtida
        int linha = tabelaResultado.getSelectedRow();
        
        if (linha>=0) {
            //Dita em qual coluna esta o id para identificar
            int idMusica = (int) tabelaResultado.getValueAt(linha, 0);
            //Pega id do usuario para armazenar as curtidas
            int idUsuario = model.Sessao.getUsuario().getId();
            
            try{
                //Conexao com o bando
                Connection conn = dao.Conexao.conectar();
                
                //Inserindo no banco
                String sql = "INSERT INTO curtida "
                        + "(id_usuario, id_musica, status) VALUES (?, ?, TRUE)";
                PreparedStatement stmt  = conn.prepareStatement(sql);
                stmt.setInt(1 , idUsuario);
                stmt.setInt(2 , idMusica);
                stmt.executeUpdate();

                JOptionPane.showMessageDialog(this, "Você curtiu essa música!");
                conn.close();
                
            }catch (Exception e){
                //Possiveis erros
                JOptionPane.showMessageDialog(this, "Erro ao curtir!" 
                        + e.getMessage());
            }
        }else {
            JOptionPane.showMessageDialog(this, "Escolha a música a ser curtida.");
        }
        
    }//GEN-LAST:event_btnCurtirActionPerformed

    private void btnDescurtirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDescurtirActionPerformed
        // TODO add your handling code here:
        //Descurtida mexer aqui
        
        int linha = tabelaResultado.getSelectedRow();
        
        if(linha>=0){
            //Dita a coluna que esta 
            int idMusica = (int) tabelaResultado.getValueAt(linha, 0);
            //Pega o id do usuario para armazenar as curtidas
            int idUsuario = model.Sessao.getUsuario().getId();
        
            try{
                //Conexão com o banco
                Connection conn = dao.Conexao.conectar();
            
                //Inserindo no banco
                String sql = "UPDATE curtida SET status ="
                        + " FALSE WHERE id_usuario = ? AND id_musica = ?";
                PreparedStatement stmt = conn.prepareStatement(sql);
                stmt.setInt(1 , idUsuario);
                stmt.setInt(2, idMusica);
                
                //Marcação
                int linhasMarcadas = stmt.executeUpdate();
            
                //Descurtir
                if (linhasMarcadas > 0) {
                    //Aqui mostra que foi possivel descurtir
                    JOptionPane.showMessageDialog(this ,
                            "Você descurtiu essa música!");
                } else {
                    //Aqui mostra que antes de descurtir precisa-se curtir
                    JOptionPane.showMessageDialog(this ,
                            "Para descurtir você precisa ter curtido antes!");
                }
                
            }catch (Exception e){
                //Erro aqui
                JOptionPane.showMessageDialog(this, "Erro ao descurtir: " 
                    + e.getMessage());
        }
        }else {
            //Precisa escolher a musica a ser curtida
            JOptionPane.showMessageDialog(this, 
                    "Escolha a música a ser descurtida.");
        }
    }//GEN-LAST:event_btnDescurtirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaBuscarMusica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaBuscarMusica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaBuscarMusica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaBuscarMusica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaBuscarMusica().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCurtir;
    private javax.swing.JButton btnDescurtir;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JComboBox<String> comboFiltro;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabelaResultado;
    private javax.swing.JTextField txtBusca;
    // End of variables declaration//GEN-END:variables
}
